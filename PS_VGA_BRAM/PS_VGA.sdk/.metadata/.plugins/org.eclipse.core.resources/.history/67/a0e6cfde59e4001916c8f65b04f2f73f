/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"

#include "xparameters.h"

#define VGA_ADDR_REG *(volatile unsigned int * )(0x43c00004)
#define VGA_DATA_REG *(volatile unsigned int * )(0x43c00000)

#define UART_COM_ADDR                 XPAR_XUARTPS_0_BASEADDR
#define UART_DEVICE_ADDR              XPAR_XUARTPS_1_BASEADDR

void print(char *str);
#define EXPAND					3
int main()
{
    unsigned short  low,high,start,r,g,b;
    unsigned int  data[32*24*EXPAND*EXPAND],temp,rgb;
    short i,j;
    short *p,* p0 = data;

	init_platform();
	VGA_Fill(0,0,640,480,0xff);

	while (1)
	{
	if (XUartPs_RecvByte(UART_DEVICE_ADDR)==0x5a)
	if (XUartPs_RecvByte(UART_DEVICE_ADDR)==0x5a)
	if (XUartPs_RecvByte(UART_DEVICE_ADDR)==0x02)
	if (XUartPs_RecvByte(UART_DEVICE_ADDR)==0x06)
	{
		start = 1;
		xil_printf("1\n");
	}
	if (start)
	{
	for(j=0;j<24;j++)
	for(i=0;i<32;i++)
	{
		r = 0x0;
		g = 0x0;
		b = 0xF;
		low = XUartPs_RecvByte(UART_DEVICE_ADDR);
		high = XUartPs_RecvByte(UART_DEVICE_ADDR);
		temp = (low & 0xFF) + ((high & 0xFF)<<8);
		if (temp > 2800)
		if (temp < 2960)
		g = (temp-2800)/10 -1;
		else if (temp < 3120)
		{
			g = 0xF;
			b = 15 - (temp-2960)/10;
		}
		else if (temp < 3280)
		{
			g = 0xF;
			b = 0;
			r = (temp-3120)/10 -1;
		}
		else if (temp < 3440)
		{
			r = 0xF;
			b = 0;
			g = 15 - (temp-3280)/10;
		}
		else
		{
			r = 0xF;
			b = 0;
		}
		rgb = (r << 8)+(g << 4)+(b);
		data[EXPAND*EXPAND*32*j +EXPAND*i] = rgb;
		data[EXPAND*EXPAND*32*j +EXPAND*i + 1] = rgb;
		data[EXPAND*EXPAND*32*j +EXPAND*i + 2] = rgb;
		data[EXPAND*EXPAND*32*j +EXPAND*i     + 32*EXPAND] = rgb;
		data[EXPAND*EXPAND*32*j +EXPAND*i + 1 + 32*EXPAND] = rgb;
		data[EXPAND*EXPAND*32*j +EXPAND*i + 2 + 32*EXPAND] = rgb;
		data[EXPAND*EXPAND*32*j +EXPAND*i     + 2*32*EXPAND] = rgb;
		data[EXPAND*EXPAND*32*j +EXPAND*i + 1 + 2*32*EXPAND] = rgb;
		data[EXPAND*EXPAND*32*j +EXPAND*i + 2 + 2*32*EXPAND] = rgb;

	}
	start = 0;
	p = p0;
	VGA_ADDR_REG = 0;
	for (i=0;i<480;i++)
	for (j=0;j<640;j++)
	{
		if ((i<24*EXPAND)&(j<32*EXPAND))
		{
			VGA_DATA_REG = *p;
			p++;
		}
		else VGA_DATA_REG = 0;


	}
	}
	}
}
